자바 클래스 컨닝페이퍼

//희승 팁 : http://tcpschool.com/java/java_class_intro


// public static void main(String[] args){ }


1) 클래스란? (Class)
	하나의 작은 프로그램으로써, 여러분들이 직접 만들수도 있고,
	자바가 제공해주는 라이브러리 클래스를 사용해도 되며,
	혹은 제3자가 만들어놓은 라이브러리 클래스를 사용할 수 있다.
	3세대 언어; 객체지향 언어 프로그래밍에서는 이러한 작은 프로그램들을
	커다란 프로그램 하나에서 각각을 변수 즉, 객체로 만들고
	그 객체를 활용하는게 목표가 된다.
	예시)우리가 입력을 받을 때에는 스캐너 클래스의 변수를 만들어서
		그 클래스 변수의 메소드 결과값을 활용한다.
		Scanner scanner = new Scanner(System.in);
		int something = scanner.nextInt();
		
2) 클래스의 구성
	클래스는 필드와 메소드로 이루어져 있다. (Field / Method)
	- 필드 : 그 [클래스의 객체]가 "어떤 정보를 저장할 수 있는지"를 설명해 놓은 것.
	- 메소드 : 그 [클래스의 객체]가 "가지고 있는 기능들"을 설명해 놓은 것.
	예시)학생이 가지고 있는 정보 : 이름, 나이, 학년, 반, 국어, 영어 등의 점수. [필드]
		학생이 가지고 있는 기능 : 총점 계산하기, 평균 계산하기, 정보 출력하기 . [메소드]
		A학생과 B학생의 기능은 동일하다. 그렇다면 A학생과 B학생을 다르게 만들어주는 건 무엇일까?
		개별 학생들이 "어떤 정보를 가지고 있느냐"에 따라 두 명의 학생을 구분하는 기준이 된다.
	▣ 필드를 선언할 땐 변수를 선언할 때와 같이
		type 필드명 으로 만들어준다.
		초기화는? 그 클래스 객체를 쓰는 다른 클래스가 알아서 할 문제!
	▣ 메소드를 선언할 땐
		returnType 메소드명(파라미터) 로 적어준다.
		1. returnType :
			해당 메소드가 종료되면서 호출된 곳으로 보내줄 값의 데이터 타입
			만약 아무런 값도 보내주지 않는다면 void 라고 적어준다.
			값을 보내줄 때에는 return 이라는 명령어를 통해서 보내준다.
		2. 파라미터 (Parameter) :
			외부에서 해당 메소드를 호출할 때, 이 메소드가 필요로 하는 값을
			보내준다. 그 값을 메소드 내부에서 일종의 변수처럼 사용할 수 있어서
			파라미터는 "매개변수"라고 부르기도 한다.
			변수와 마찬가지로 [ 데이터타입 이름 ]을 적어주면 된다.
			
3) 접근제한자 (Access Modifier)
	접근제한자란 해당 메소드 혹은 해당 변수가 어디서 접근이 가능한지를 적어주는 것
	public - protected - default - private 순서로 명명한다.
		public: 어디서든 접근이 가능하다.
		protected: 외부에서 상속받거나 같은 패키지면 사용이 가능하지만
				      외부 패키지나 상속받지 않는 클래스는 접근할 수 없다.
		default: 내부 패키지에서만 접근이 가능하다.
				  우리가 아무것도 적지 않으면 자동으로 default가 적용된다.
		private: 자기 자신 외 아무도 접근 불가
		
4) static
	static이란 해당 메소드나 변수를 객체 선언 없이도 쓸 수 있게 만들어준다.
	만약 static메소드가 다른 메소드나 변수를 써야 한다면 그 다른 메소드와 
	변수도 static을 붙여주어야 한다!
	
5) 생성자(Constructor)
	생성자란 해당 클래스로 객체를 만들 때 만약 기본적인 작업이 필요하면
	우리가 생성자를 통해서 해당 작업들을 해줄 수 있다.
	기본적으로 생성자는 [ 클래스이름() ]으로 이루어져 있다.
	우리가 클래스에 따로 생성자를 만들지 않더라도, 자바가 기본적으로 생성자를 제공한다.
	우리가 생성자를 따로 만들게 되면 한 가지 주의할 점 :
		파라미터가 있는 생성자만 만들면 더이상 파라미터 없는 생성자를 호출할 수 없다!
		만약 파라미터가 있는 생성자, 파라미터가 없는 생성자 모두 필요하다면
		전부다 만들어주어야만 한다!
		
6) 캡슐화(Encapsulation)
	객체지향언어 에서는 더 이상 필드를 public이나 default로 지정하지 않는다.
	모든 필드를 private, 외부에서 쓰지 않는 메소드도 private으로 지정한다.
	하지만 private 접근제한자를 적어주게 되면 더 이상 [객체.필드]로 값을 호출하거나 넣어줄 수 없다.
	이렇게 필드를 숨기는 것을 데이터 은닉화 라고 한다.
	숨겨진 필드에 값을 넣을 때는 이제 메소드를 통해서 값을 넣는다.
	값을 할당하는(저장하는) 메소드는 setter, 값을 호출하는 메소드는 getter 라고한다.
	
	▣setter메소드는
		public void set필드명(필드타입 필드이름) {
			this.필드이름 = 필드이름;
		}
	으로 적어준다. this는 이 메소드를 호출하는 객체를 뜻한다.
		
	▣getter메소드는
		public 필드타입 get필드이름() {
			return 필드이름;
		}
	으로 적어준다.
	
7) 오버라이딩과 오버로딩
	오버라이딩 : 상속받은 메소드를 내가 필요에 따라서 재정의하는 것.
		오버라이딩을 할 때 주의할 점은 상속해주는 클래스에 적힌 메소드와
		이름, 파라미터가 완전히 일치해야 한다.
	오버로딩 : 같은 이름의 메소드를 다른 파라미터로 여러개 만드는 것.
		오버로딩을 할 때 주의할 점은 파라미터가 달라야 한다는 것이다.
		파라미터가 다르다 라는 것은 파라미터의 데이터타입들이 달라야한다는 것이다.
		(String name, int korean, int math, int english)와
		(String name, int english, int korean, int math)는 같은 파라미터를 가지고 있는 것이다.
		->("조재영, 80, 80, 80) 이라고 하면 둘중 어떤거? 호출이 안된다 -> 구분이 안된다.
		둘다 (String, int, int, int) 이기 때문에 구분이 안된다.
		